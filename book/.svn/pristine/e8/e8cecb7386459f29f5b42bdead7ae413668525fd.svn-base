package com.gl.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

import com.gl.model.Student;
import com.gl.model.Teacher;
import com.gl.service.StudentService;
import com.gl.utils.ExcelHelper;
import com.gl.utils.PageBean;
import com.gl.utils.TimeHelper;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

public class StudentSuperManagerAction extends ActionSupport implements ModelDriven<Student> {
	private Student student = new Student();
	private final String templateId = "student";
	@Override
	public Student getModel() {
		return student;
	}
	private StudentService studentService;
	public void setStudentService(StudentService studentService) {
		this.studentService=studentService;
	}
	private Integer page;
	public void setPage(Integer page) {
		this.page=page;
	}
	private String select;
	public void setSelect(String select){
		//System.out.println("设置的关键字为："+select);
		this.select=select;
	}
	public String findStudentAll() {
		//System.out.println("查找所有学生");
		//String s = (String)ActionContext.getContext().get("select");
		PageBean<Student> pageBean = new PageBean<Student>();
		String s = null;
		if(select!=null) {
			if(select.equals("0")) {
				ServletActionContext.getRequest().getSession().removeAttribute("select");
			}
		}
		s = (String)ServletActionContext.getRequest().getSession().getAttribute("select");
		if(s!=null) {
			//System.out.println("当前需要符合的条件为："+s);
			pageBean=studentService.findStudentByKey(s, page);
		}
		else {
			pageBean=studentService.findStudentByPage(page);
		}
		ActionContext.getContext().getValueStack().set("pageBean", pageBean);
		return "findStudentAll";
	}
	public String info() {
		student=studentService.findStudentById(student.getSid());
		return "infoPage";
	}
	public String edit() {
		student=studentService.findStudentById(student.getSid());
		return "editPage";
	}
	public String addPage() {
		return "addPage";
	}
	public String save(){
		student.setCreate_time(TimeHelper.getCurrentTime());
		studentService.save(student);
		return "saveSuccess";
	}
	public String update() {
		studentService.update(student);
		return "updateSuccess";
	}
	public String select(){
		this.clearActionErrors();
		if(select==null||select==""){
			this.addActionError("关键字为空：请重新输入！");
			return "findStudentAll";
		}
		//System.out.println("搜索到了，关键字："+select+"当前页面为："+page);
		ServletActionContext.getRequest().getSession().setAttribute("select", select);
		PageBean<Student> pageBean = studentService.findStudentByKey(select, page);
		if(pageBean==null){
			this.addActionError("查无结果，请检查关键字是否正确！");
			return "findStudentAll";
		}
		ActionContext.getContext().getValueStack().set("pageBean", pageBean);
		//System.out.println("搜索成功,共有   "+pageBean.getList().size()+"   个结果");
		return "selectSuccess";
	}

	public String importData() {
		//得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全
        String savePath = ServletActionContext.getServletContext().getRealPath("/WEB-INF/upload");
        //上传时生成的临时文件保存目录
        String tempPath = ServletActionContext.getServletContext().getRealPath("/WEB-INF/temp");
        File tmpFile = new File(tempPath);
        if (!tmpFile.exists()) {
            //创建临时目录
            tmpFile.mkdir();
        }
        
        //消息提示
        String message = "";
        String info="";
        HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		MultiPartRequestWrapper multipart = (MultiPartRequestWrapper)request;
		//MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)request;
		//MultipartFile multipartFile = multipartRequest.getFile("CHANNEL_PACKAGE_URL");
		File[] files=multipart.getFiles("fileInput");
		for(File f : files) {
			try {
				//读取Excel文件
				@SuppressWarnings("resource")
				HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(f));
				HSSFSheet sheet = wb.getSheetAt(0);
				
				//获取模板文件
				String path = ServletActionContext.getServletContext().getRealPath("/template");
				path = path + "/" + templateId + ".xml";
				File file = new File(path);
				
				//解析xml模板文件
				SAXBuilder builder = new SAXBuilder();
				Document parse =  builder.build(file);
				Element root = parse.getRootElement();
				Element tbody = root.getChild("tbody");
				Element tr = tbody.getChild("tr");
				@SuppressWarnings("unchecked")
				List<Element> children = tr.getChildren("td");
				//解析excel开始行，开始列
				int firstRow = tr.getAttribute("firstrow").getIntValue();
				int firstCol = tr.getAttribute("firstcol").getIntValue();
				//获取excel最后一行行号
				int lastRowNum = sheet.getLastRowNum();
				//循环每一行处理数据
				for (int i = firstRow; i <= lastRowNum; i++) {
					//读取某行
					HSSFRow row = sheet.getRow(i);
					//判断改行是否为空
					if(ExcelHelper.isEmptyRow(row)){
						continue;
					}
					int lastCellNum = row.getLastCellNum();
					//如果非空行，则取所有单元格的值
					for (int j = firstCol; j <lastCellNum; j++) {
						Element td = children.get(j-firstCol);
						HSSFCell cell = row.getCell(j);
						//如果单元格为null,继续处理下一个cell
						if(cell == null){
							continue;
						}
						//获取单元格属性值
						String value = ExcelHelper.getCellValue(cell,td);
						if(value.endsWith(".0")) {
							value=value.substring(0, value.length()-2);
						}
						switch(j) {
						case 0:
							student.setName(value);
							break;
						case 1:
							student.setBirthday(value);
							break;
						case 2:
							if(value.equals("男")) {
								student.setSex(0);
							}else {
								student.setSex(1);
							}
							break;
						case 3:
							student.setFather_name(value);
							break;
						case 4:
							student.setFather_number(value);
							break;
						case 5:
							student.setMother_name(value);
							break;
						case 6:
							student.setMother_number(value);
							break;
						case 7:
							student.setClass_type(value);
							break;
						case 8:
							student.setSchool(value);
							break;
						}
					}
					save();
				}
				
				String str = "{\"status\":\"ok\",\"message\":\"导入成功！\"}";
				response.getWriter().write(str);
			} catch (Exception e) {
				String str = "{\"status\":\"noOk\",\"message\":\"导入失败！\"}";
				try {
					response.getWriter().write(str);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				e.printStackTrace();
			}	
		}
        return "importSuccess";
	}
}
