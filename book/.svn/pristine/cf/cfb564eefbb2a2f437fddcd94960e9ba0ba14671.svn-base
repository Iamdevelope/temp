package com.gl.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

import com.gl.model.Book;
import com.gl.model.BookTheme;
import com.gl.model.BookType;
import com.gl.service.BookService;
import com.gl.service.BookThemeService;
import com.gl.service.BookTypeService;
import com.gl.utils.ExcelHelper;
import com.gl.utils.FileHelper;
import com.gl.utils.PageBean;
import com.gl.utils.TimeHelper;
import com.gl.utils.UUIDUtils;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

/*
 * 后台管理员管理绘本Action
 * */
public class BookSuperManagerAction extends ActionSupport implements ModelDriven<Book> {
	private final String templateId = "art";
	private Book book=new Book();
	@Override
	public Book getModel() {
		return book;
	}
	private Integer bid;
	public void setBid(Integer bid) {
		this.bid=bid;
	}
	private BookService bookService;
	
	
	public BookService getBookService() {
		return bookService;
	}

	public void setBookService(BookService bookService) {
		this.bookService = bookService;
	}

	private String book_type;
	private String book_class;
	private String book_theme;
	
	private Integer btype;
	private Integer bclass;
	

	public void setBtype(Integer btype) {
		System.out.println("传过来的绘本类型为："+btype);
		switch(btype) {
		case 1:
			this.book_type="社会";
			break;
		case 2:
			this.book_type="数学";
			break;
		case 3:
			this.book_type="探究";
			break;
		case 4:
			this.book_type="美术";
			break;
		case 5:
			this.book_type="音乐";
			break;
		case 6:
			this.book_type="健康";
			break;
		case 7:
			this.book_type="语言";
			break;
		}
		book.setType(btype);
		this.btype=btype;
	}

	public void setBclass(Integer bc) {
		System.out.println("当前选择的绘本班级类型为："+bc);
		switch(bc) {
		case 0:
			this.select="大班";
			break;
		case 1:
			this.select="中班";
			break;
		case 2:
			this.select="小班";
			break;
		}
		this.bclass=bc;
	}
	public String getBook_type() {
		return book_type;
	}
	public void setBook_type(String book_type) {
		System.out.println("设置的绘本类型："+book_type);
		this.book_type = book_type;
	}
	public String getBook_class() {
		return book_class;
	}
	public void setBook_class(String book_class) {
		this.book_class = book_class;
	}
	public String getBook_theme() {
		return book_theme;
	}
	public void setBook_theme(String book_theme) {
		this.book_theme = book_theme;
	}
	public String update() {
		bookService.update(book);
		return "updateSuccess";
	}
	public String addPage() {
		//System.out.println("当前需要添加的绘本类型为："+book_type);
		ActionContext.getContext().getValueStack().set("type",btype);
		ActionContext.getContext().getValueStack().set("book_type", book_type);
		return "addPage";
	}
	public String delete() {
		ServletActionContext.getRequest().getSession().setAttribute("book_type", book_type);
		ServletActionContext.getRequest().getSession().setAttribute("btype", btype);
		return "deleteSuccess";
	}
	public String save() {
		book.setAddtime(TimeHelper.getCurrentTime());
		book.setScore(UUIDUtils.getRandomNum(3, 5));
		book.setBook_used_count(UUIDUtils.getRandomNum(100, 1000));
		String page="D:\\Test\\Book_service\\Book_gl\\WebContent\\images\\"+book.getName();
		ServletActionContext.getRequest().getSession().setAttribute("book_type", book.getBook_type());
		ServletActionContext.getRequest().getSession().setAttribute("btype", btype);
		
		book.setBook_path(page);
		bookService.save(book);
		return "saveSuccess";
	}
	public String edit() {
		book=bookService.findBookById(book.getBid());
		return "editPage";
	}
	public String info() {
		System.out.println("来自详细信息界面*****当前选中的绘本类型为："+book_type+"****以及当前页面为："+page+"****以及btype:"+btype);
		book=bookService.findBookById(book.getBid());
		book.setType(btype);
		return "infoPage";
	}
	private Integer page;
	public void setPage(Integer page) {
		System.out.println("设置的页面为："+page);
		this.page=page;
	}
	private String select;
	public void setSelect(String select){
		this.select=select;
	}
	public String findBookAll() {
		String temp = (String)ServletActionContext.getRequest().getSession().getAttribute("book_type");
		if(temp!=null) {
			book_type=temp;
			System.out.println("新增绘本的类型为："+book_type);
			ServletActionContext.getRequest().getSession().removeAttribute("book_type");
		}
		Integer i = (Integer)ServletActionContext.getRequest().getSession().getAttribute("btype");
		if(i!=null) {
			System.out.println("新增绘本的类型id："+i);
			btype = i;
			ServletActionContext.getRequest().getSession().removeAttribute("btype");
		}
		System.out.println("当前选中的绘本类型为："+book_type+"****以及当前页面为："+page+"****以及btype:"+btype);
		PageBean<Book> pageBean=bookService.findAllBooksByBookTypeOrBookClass(btype,book_type,page);
		if(pageBean.getList().size()<=0) {
			this.addActionError("当前还没有添加绘本，请去添加。");
			return "findBookAll";
		}
		ActionContext.getContext().getValueStack().set("type", btype);
		ActionContext.getContext().getValueStack().set("pageBean", pageBean);
		return "findBookAll";
	}
	public String select(){
		this.clearActionErrors();//每次运行时，将actionError清空
		if(select==null||select==""){
			this.addActionError("关键字为空：请重新输入！");
			return "findBookAll";
		}
		System.out.println("搜索到了，关键字："+select+"当前页面为："+page);
		PageBean<Book> pageBean = bookService.findAllBooksByBookTypeAndClass(this.book_type,select, page);
		if(pageBean==null){
			this.addActionError("查无结果，请检查关键字是否正确！");
			return "findBookAll";
		}
		ActionContext.getContext().getValueStack().set("pageBean", pageBean);
		//System.out.println("搜索成功,共有   "+pageBean.getList().size()+"   个结果");
		return "selectSuccess";
	}
	public String find(){
		this.clearActionErrors();//每次运行时，将actionError清空
		if(btype!=null) {
			ActionContext.getContext().getValueStack().set("type", btype);
		}
		if(select==null||select==""){
			this.addActionError("关键字为空：请重新输入！");
			return "findBookAll";
		}
		//System.out.println("搜索到了，关键字："+select+"当前页面为："+page+"当前绘本类型："+book_type);
		PageBean<Book> pageBean = bookService.findAllBooksByBookTypeAndClass(this.book_type,select, page);
		if(pageBean==null){
			this.addActionError("当前还没有添加绘本，请去添加。");
			return "findBookAll";
		}
		ActionContext.getContext().getValueStack().set("pageBean", pageBean);
		//System.out.println("搜索成功,共有   "+pageBean.getList().size()+"   个结果");
		return "selectSuccess";
	}
	/*
	 * 绘本预览界面
	 * */
	public String show() {
		System.out.println("来自预览界面*****当前选中的绘本类型为："+book_type+"****以及btype:"+btype);
		
		book=bookService.findBookById(book.getBid());
		book.setType(btype);
		
		String p = ServletActionContext.getRequest().getServletContext().getRealPath("images");
		System.out.println("***************this is by show of path:"+p);
		System.out.println("该绘本的id："+bid+"***********通过实体获取的绘本id："+book.getBid()+"*****该绘本图片保存的路径为："+book.getBook_path()+"***该绘本所属类型："+btype);
		List<String> list = FileHelper.traverseFolder(p+"/"+book.getName());
		if(list!=null) {
			String path = "";
			for(int i=0;i<list.size();i++) {
				path+=list.get(i)+"|";
			}
			System.out.println("这是截取前的所有绘本路径："+path);
			path = path.substring(0,path.length()-1);
			path = path.trim();
			//System.out.println("这是截取后的所有绘本路径："+path);
			book.setBookImg_path(path);
		}
		return "showPage";
	}
	
	
	public String downData() {
		return "downSuccess";
	}
	
	public String importData() {
		//System.out.println("正在上传绘本信息");
		//得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问，保证上传文件的安全
        String savePath = ServletActionContext.getServletContext().getRealPath("/WEB-INF/upload");
        //上传时生成的临时文件保存目录
        String tempPath = ServletActionContext.getServletContext().getRealPath("/WEB-INF/temp");
        File tmpFile = new File(tempPath);
        if (!tmpFile.exists()) {
            //创建临时目录
            tmpFile.mkdir();
        }
        
        //消息提示
        String message = "";
        String info="";
        HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		MultiPartRequestWrapper multipart = (MultiPartRequestWrapper)request;
		//MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)request;
		//MultipartFile multipartFile = multipartRequest.getFile("CHANNEL_PACKAGE_URL");
		File[] files=multipart.getFiles("fileInput");
		for(File f : files) {
			try {
				//读取Excel文件
				@SuppressWarnings("resource")
				HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(f));
				HSSFSheet sheet = wb.getSheetAt(0);
				
				//获取模板文件
				String path = ServletActionContext.getServletContext().getRealPath("/template");
				path = path + "/" + templateId + ".xml";
				File file = new File(path);
				
				//解析xml模板文件
				SAXBuilder builder = new SAXBuilder();
				Document parse =  builder.build(file);
				Element root = parse.getRootElement();
				Element tbody = root.getChild("tbody");
				Element tr = tbody.getChild("tr");
				@SuppressWarnings("unchecked")
				List<Element> children = tr.getChildren("td");
				//解析excel开始行，开始列
				int firstRow = tr.getAttribute("firstrow").getIntValue();
				int firstCol = tr.getAttribute("firstcol").getIntValue();
				//获取excel最后一行行号
				int lastRowNum = sheet.getLastRowNum();
				//循环每一行处理数据
				for (int i = firstRow; i <= lastRowNum; i++) {
					//读取某行
					HSSFRow row = sheet.getRow(i);
					//判断改行是否为空
					if(ExcelHelper.isEmptyRow(row)){
						continue;
					}
					int lastCellNum = row.getLastCellNum();
					//如果非空行，则取所有单元格的值
					for (int j = firstCol; j <lastCellNum; j++) {
						Element td = children.get(j-firstCol);
						HSSFCell cell = row.getCell(j);
						//如果单元格为null,继续处理下一个cell
						if(cell == null){
							continue;
						}
						//获取单元格属性值
						String value = ExcelHelper.getCellValue(cell,td);
						if(value.endsWith(".0")) {
							value=value.substring(0, value.length()-2);
						}
						switch(j) {
						case 0:
							book.setName(value);
							break;
						case 1:
							book.setBook_class(value);
							break;
						case 2:
							book.setBook_type(value);
							break;
						case 3:
							book.setBook_theme(value);
							break;
						case 4:
							book.setBook_abstract(value);
							break;
						}
					}
					save();
				}
				
				String str = "{\"status\":\"ok\",\"message\":\"导入成功！\"}";
				response.getWriter().write(str);
			} catch (Exception e) {
				String str = "{\"status\":\"noOk\",\"message\":\"导入失败！\"}";
				try {
					response.getWriter().write(str);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				e.printStackTrace();
			}	
		}
        return "importSuccess";
	}
}
